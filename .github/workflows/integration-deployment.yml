name: CI/CD
on:
  push:
    branches:
      - 'main'

jobs:
  # Path Filtering
  filter-paths:
    name: Filter Paths
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Filter Paths
        id: filter
        uses: dorny/paths-filter@v3.0.2
        with:
          filters: |
            api:
              - 'api/**'
              - '!(api)/**/*.md'
            frontend:
              - 'frontend/**'
              - '!(frontend)/**/*.md'
  
  # START: API
  api-lint-typecheck:
    name: 'API: Lint & Type Check'
    runs-on: ubuntu-latest
    needs: filter-paths
    if: needs.filter-paths.outputs.api == 'true'
    permissions:
      checks: write
      pull-requests: read
      contents: read
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Nodejs Environment
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: 'api/yarn.lock'
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Lint
        run: yarn lint:nofix --output-file eslint_report.json --format json
        continue-on-error: true
      - name: Type Check
        run: yarn tsc --noEmit > typescript.log
        continue-on-error: true
      - name: Annotate Code
        uses: DerLev/eslint-annotations@v2
        with:
          eslint-report: api/eslint_report.json
          typescript-log: api/typescript.log
          github-token: ${{ secrets.GITHUB_TOKEN }}
          error-on-warn: true
          status-check-name: 'API: Annotations'
          fail-in-pr: false
          add-notice-with-url: false
  # END: API

  # START: Frontend
  frontend-lint-typecheck:
    name: 'Frontend: Lint & Type Check'
    runs-on: ubuntu-latest
    needs: filter-paths
    if: needs.filter-paths.outputs.frontend == 'true'
    permissions:
      checks: write
      pull-requests: read
      contents: read
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Nodejs Environment
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: 'frontend/yarn.lock'
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Lint
        run: yarn lint --output-file eslint_report.json --format json
        continue-on-error: true
      - name: Type Check
        run: yarn tsc --noEmit > typescript.log
        continue-on-error: true
      - name: Annotate Code
        uses: DerLev/eslint-annotations@v2
        with:
          eslint-report: frontend/eslint_report.json
          typescript-log: frontend/typescript.log
          github-token: ${{ secrets.GITHUB_TOKEN }}
          error-on-warn: true
          status-check-name: 'Frontend: Annotations'
          fail-in-pr: false
          add-notice-with-url: false
  # END: Frontend

  # START: Container build
  container-build:
    name: 'Build a Docker Container'
    runs-on: ubuntu-latest
    needs: [api-lint-typecheck, frontend-lint-typecheck]
    # if: |
    #   always() &&
    #   (needs.api-lint-typecheck.result == 'success' || needs.api-lint-typecheck.result == 'skipped') &&
    #   (needs.frontend-lint-typecheck.result == 'success' || needs.frontend-lint-typecheck.result == 'skipped') &&
    #   !(needs.api-lint-typecheck.result == 'skipped' && needs.frontend-lint-typecheck.result == 'skipped')
    if: always()
    environment: Production
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/derlev/sandwich-spawnpoint
          tags: |
            type=raw,value=latest
            type=sha,prefix=,format=short
      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/derlev/sandwich-spawnpoint
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  # END: Container build
